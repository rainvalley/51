C51 COMPILER V9.60.0.0   MAIN                                                              11/07/2020 12:05:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <stc15f2k60s2.h>
   2          #include "iic.h"
   3          #include "ds1302.h"
   4          typedef unsigned char uchar;
   5          typedef unsigned int uint;
   6          sbit KEY_IN_0=P4^4;
   7          sbit KEY_IN_1=P4^2;
   8          sbit KEY_IN_2=P3^5;
   9          sbit KEY_IN_3=P3^4;
  10          sbit KEY_OUT_0=P3^0;
  11          sbit KEY_OUT_1=P3^1;
  12          sbit KEY_OUT_2=P3^2;
  13          sbit KEY_OUT_3=P3^3;
  14          uchar dig_code[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0xbf,0xff};
  15          uchar buff_tube[]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
  16          uchar key_back[4][4]={{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
  17          uchar key_stat[4][4]={{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
  18          char time[]={55,59,23};
  19          uchar dat[]={0x00,0x00,0x00,0x00};
  20          uchar volta,type,flag_dis,flag_set_0,flag_set_1,flag_set_2,vh,vl,flag_time=1;
  21          uint count_f,dat_f;
  22          
  23          void select(uchar channel)
  24          {
  25   1        switch(channel)
  26   1        {
  27   2          case 4:
  28   2            P2=(P2&0x1f)|0x80;
  29   2            break;
  30   2          case 5:
  31   2            P2=(P2&0x1f)|0xa0;
  32   2            break;
  33   2          case 6:
  34   2            P2=(P2&0x1f)|0xc0;
  35   2            break;
  36   2          case 7:
  37   2            P2=(P2&0x1f)|0xe0;
  38   2            break;
  39   2          default:
  40   2            P2=(P2&0x1f);
  41   2            break;
  42   2        }
  43   1      }
  44          
  45          void display()
  46          {
  47   1        static uchar index=0;
  48   1        select(7);
  49   1        P0=0xff;
  50   1        select(6);
  51   1        P0=0x01<<index;
  52   1        select(7);
  53   1        P0=buff_tube[index];
  54   1        select(0);
C51 COMPILER V9.60.0.0   MAIN                                                              11/07/2020 12:05:47 PAGE 2   

  55   1        index++;
  56   1        index&=0x07;
  57   1      }
  58          
  59          void set_display()
  60          {
  61   1        if(flag_dis==0)
  62   1        {
  63   2          buff_tube[0]=dig_code[time[2]/16];
  64   2          buff_tube[1]=dig_code[time[2]%16];
  65   2          buff_tube[2]=dig_code[10];
  66   2          buff_tube[3]=dig_code[time[1]/16];
  67   2          buff_tube[4]=dig_code[time[1]%16];
  68   2          buff_tube[5]=dig_code[10];
  69   2          buff_tube[6]=dig_code[time[0]/16];
  70   2          buff_tube[7]=dig_code[time[0]%16];
  71   2        }
  72   1        else if(flag_dis==1)
  73   1        {
  74   2          buff_tube[0]=dig_code[10];
  75   2          buff_tube[1]=dig_code[1];
  76   2          buff_tube[2]=dig_code[10];
  77   2          buff_tube[3]=dig_code[11];
  78   2          buff_tube[4]=dig_code[volta/100];
  79   2          buff_tube[5]=dig_code[volta%100/10];
  80   2          buff_tube[6]=dig_code[volta%10];
  81   2          buff_tube[7]=dig_code[0];
  82   2        }
  83   1        else if(flag_dis==2)
  84   1        {
  85   2          buff_tube[0]=dig_code[10];
  86   2          buff_tube[1]=dig_code[2];
  87   2          buff_tube[2]=dig_code[10];
  88   2          buff_tube[3]=dig_code[dat_f/10000];
  89   2          buff_tube[4]=dig_code[dat_f%10000/1000];
  90   2          buff_tube[5]=dig_code[dat_f%1000/100];
  91   2          buff_tube[6]=dig_code[dat_f%100/10];
  92   2          buff_tube[7]=dig_code[dat_f%10];
  93   2        }
  94   1        else if(flag_dis==3)
  95   1        {
  96   2          buff_tube[0]=dig_code[dat[0]/16];
  97   2          buff_tube[1]=dig_code[dat[0]%16];
  98   2          buff_tube[2]=dig_code[10];
  99   2          buff_tube[3]=dig_code[dat[1]/16];
 100   2          buff_tube[4]=dig_code[dat[1]%16];
 101   2          buff_tube[5]=dig_code[10];
 102   2          buff_tube[6]=dig_code[dat[2]/16];
 103   2          buff_tube[7]=dig_code[dat[2]%16];
 104   2        }
 105   1        else if(flag_dis==4)
 106   1        {
 107   2          
 108   2        }
 109   1        else if(flag_dis==5)
 110   1        {
 111   2          buff_tube[0]=dig_code[time[2]/10];
 112   2          buff_tube[1]=dig_code[time[2]%10];
 113   2          buff_tube[2]=dig_code[10];
 114   2          buff_tube[3]=dig_code[time[1]/10];
 115   2          buff_tube[4]=dig_code[time[1]%10];
 116   2          buff_tube[5]=dig_code[10];
C51 COMPILER V9.60.0.0   MAIN                                                              11/07/2020 12:05:47 PAGE 3   

 117   2          buff_tube[6]=dig_code[time[0]/10];
 118   2          buff_tube[7]=dig_code[time[0]%10];
 119   2        }
 120   1        else if(flag_dis==6)
 121   1        {
 122   2          buff_tube[0]=dig_code[vh/100];
 123   2          buff_tube[1]=dig_code[vh%100/10];
 124   2          buff_tube[2]=dig_code[vh%10];
 125   2          buff_tube[3]=dig_code[0];
 126   2          buff_tube[4]=dig_code[vl/100];
 127   2          buff_tube[5]=dig_code[vl%100/10];
 128   2          buff_tube[6]=dig_code[vl%10];
 129   2          buff_tube[7]=dig_code[0];
 130   2        }
 131   1        else if(flag_dis==7)
 132   1        {
 133   2          buff_tube[0]=dig_code[10];
 134   2          buff_tube[1]=dig_code[2];
 135   2          buff_tube[2]=dig_code[10];
 136   2          buff_tube[3]=dig_code[(1.0/dat_f*1000*1000)/10000];
*** ERROR C193 IN LINE 136 OF main.c: bad operand type
 137   2          buff_tube[4]=dig_code[(1.0/dat_f*1000*1000)%10000/1000];
 138   2          buff_tube[5]=dig_code[(1.0/dat_f*1000*1000)%1000/100];
 139   2          buff_tube[6]=dig_code[(1.0/dat_f*1000*1000)%100/10];
 140   2          buff_tube[7]=dig_code[(1.0/dat_f*1000*1000)%10];
 141   2        }
 142   1      }
 143          
 144          uchar bcd_to_num(uchar bcd)
 145          {
 146   1        uchar a,b;
 147   1        a=bcd/16;
 148   1        b=bcd%16;
 149   1        return (a*10+b);
 150   1      }
 151          
 152          uchar num_to_bcd(uchar num)
 153          {
 154   1        uchar a,b;
 155   1        a=num/10;
 156   1        b=num%10;
 157   1        return (a*16+b);
 158   1      }
 159          
 160          void scan_key()
 161          {
 162   1        static uchar key_buff[4][4]={{0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},{0xff,0xff
             -,0xff,0xff}};
 163   1        static uchar key_out=0;
 164   1        uchar i;
 165   1        key_buff[key_out][0]=(key_buff[key_out][0]<<1)|KEY_IN_0;
 166   1        key_buff[key_out][1]=(key_buff[key_out][1]<<1)|KEY_IN_1;
 167   1        key_buff[key_out][2]=(key_buff[key_out][2]<<1)|KEY_IN_2;
 168   1        key_buff[key_out][3]=(key_buff[key_out][3]<<1)|KEY_IN_3;
 169   1        for(i=0;i<4;i++)
 170   1        {
 171   2          if((key_buff[key_out][i]&0x0f)==0x0f)
 172   2          {
 173   3            key_stat[key_out][i]=1;
 174   3          }
 175   2          else if((key_buff[key_out][i]&0x0f)==0x00)
 176   2          {
C51 COMPILER V9.60.0.0   MAIN                                                              11/07/2020 12:05:47 PAGE 4   

 177   3            key_stat[key_out][i]=0;
 178   3          }
 179   2        }
 180   1        key_out++;
 181   1        key_out&=0x03;
 182   1        switch(key_out)
 183   1        {
 184   2          case 0: KEY_OUT_3=1;KEY_OUT_0=0;break;
 185   2          case 1: KEY_OUT_0=1;KEY_OUT_1=0;break;
 186   2          case 2: KEY_OUT_1=1;KEY_OUT_2=0;break;
 187   2          case 3: KEY_OUT_2=1;KEY_OUT_3=0;break;
 188   2          default: break;
 189   2        }
 190   1      }
 191          
 192          void key_fun(uchar i,uchar j)
 193          {
 194   1        if(i==0&&j==0) //S7按键，显示时间
 195   1        {
 196   2          flag_dis=0;
 197   2          write_ds1302();
 198   2          flag_time=1;
 199   2        }
 200   1        else if(i==1&&j==0) //S6按键，显示电压阈值
 201   1        {
 202   2          flag_dis=1;
 203   2        }
 204   1        else if(i==2&&j==0) //S5按键，显示频率
 205   1        {
 206   2          flag_dis=2;
 207   2        }
 208   1        else if(i==2&&j==1) //S9按键，显示数据发生时间&类型
 209   1        {
 210   2          flag_dis=3;
 211   2        }
 212   1        else if(i==3&&j==0) //S4按键，切换设置/显示类型
 213   1        {
 214   2          if(flag_dis==0||flag_dis==5) //如果位于时间显示状态进入时间设置状态，位于时间设置界面则切换时间设置单元
 215   2          {
 216   3            flag_dis=5;
 217   3            flag_set_0++; //设置单元
 218   3            flag_time=0; //进入时间设置状态后关闭时间读取
 219   3            if(flag_set_0>2)
 220   3            {
 221   4              flag_set_0=0;
 222   4            }
 223   3          }
 224   2          else if(flag_dis==1||flag_dis==6) //如果位于电压显示状态进入阈值设置状态，位于阈值设置界面则切换阈值设置
             -单元
 225   2          {
 226   3            flag_dis=6;
 227   3            flag_set_1=~flag_set_1;
 228   3          }
 229   2          else if(flag_dis==2||flag_dis==7) //如果处于频率显示，则切换为周期/频率显示
 230   2          {
 231   3            flag_dis=7;
 232   3            flag_set_2=~flag_set_2;
 233   3          }
 234   2        }
 235   1        else if(i==0&&j==1) //S11按键，加
 236   1        {
 237   2          if(flag_dis==5)
C51 COMPILER V9.60.0.0   MAIN                                                              11/07/2020 12:05:47 PAGE 5   

 238   2          {
 239   3            if(flag_set_0==0) //时间设置界面下小时单元的处理
 240   3            {
 241   4              time[2]++;
 242   4              if(time[2]>=24)
 243   4              {
 244   5                time[2]=0;
 245   5              }
 246   4            }
 247   3            else if(flag_set_0==1)
 248   3            {
 249   4              time[1]++;
 250   4              if(time[1]>=60)
 251   4              {
 252   5                time[1]=0;
 253   5              }
 254   4            }
 255   3            else if(flag_set_0==2)
 256   3            {
 257   4              time[0]++;
 258   4              if(time[0]>=60)
 259   4              {
 260   5                time[0]=0;
 261   5              }
 262   4            }
 263   3          }
 264   2          else if(flag_dis==6)
 265   2          {
 266   3            if(flag_set_1==0) //电压阈值设置状态下vh阈值的处理
 267   3            {
 268   4              vh=vh+500;
 269   4              if(vh>=5000)
 270   4              {
 271   5                vh=5000;
 272   5              }
 273   4            }
 274   3            else if(flag_set_1==1)
 275   3            {
 276   4              vl=vl+500;
 277   4              if(vl>=5000)
 278   4              {
 279   5                vl=5000;
 280   5              }
 281   4            }
 282   3          }
 283   2        }
 284   1        else if(i==1&&j==1) //S10按键，减，功能参考上文
 285   1        {
 286   2          if(flag_dis==5)
 287   2          {
 288   3            if(flag_set_0==0)
 289   3            {
 290   4              time[2]--;
 291   4              if(time[2]<=-1)
 292   4              {
 293   5                time[2]=23;
 294   5              }
 295   4            }
 296   3            else if(flag_set_0==1)
 297   3            {
 298   4              time[1]--;
 299   4              if(time[1]<=-1)
C51 COMPILER V9.60.0.0   MAIN                                                              11/07/2020 12:05:47 PAGE 6   

 300   4              {
 301   5                time[1]=59;
 302   5              }
 303   4            }
 304   3            else if(flag_set_0==2)
 305   3            {
 306   4              time[0]--;
 307   4              if(time[0]<=-1)
 308   4              {
 309   5                time[0]=59;
 310   5              }
 311   4            }
 312   3          }
 313   2          else if(flag_dis==6)
 314   2          {
 315   3            if(flag_set_1==0)
 316   3            {
 317   4              vh=vh-500;
 318   4              if(vh<=0)
 319   4              {
 320   5                vh=0;
 321   5              }
 322   4            }
 323   3            else if(flag_set_1==1)
 324   3            {
 325   4              vl=vl-500;
 326   4              if(vl<=0)
 327   4              {
 328   5                vl=0;
 329   5              }
 330   4            }
 331   3          }
 332   2        }
 333   1      }
 334          
 335          void key_press()
 336          {
 337   1        uchar i,j;
 338   1        for(i=0;i<4;i++)
 339   1        {
 340   2          for(j=0;j<4;j++)
 341   2          {
 342   3            if(key_stat[i][j]!=key_back[i][j])
 343   3            {
 344   4              if(key_stat[i][j]==0)
 345   4              {
 346   5                key_fun(i,j);
 347   5              }
 348   4              key_back[i][j]=key_stat[i][j];
 349   4            }
 350   3          }
 351   2        }
 352   1      }
 353          
 354          void adc()
 355          {
 356   1        IIC_Start();
 357   1        IIC_SendByte(0x90);
 358   1        IIC_WaitAck();
 359   1        IIC_SendByte(0x03);
 360   1        IIC_WaitAck();
 361   1        IIC_Stop();
C51 COMPILER V9.60.0.0   MAIN                                                              11/07/2020 12:05:47 PAGE 7   

 362   1        
 363   1        IIC_Start();
 364   1        IIC_SendByte(0x91);
 365   1        IIC_WaitAck();
 366   1        volta=(IIC_RecByte()/255.0*250)*2;
 367   1        IIC_Ack(0);
 368   1        IIC_Stop();
 369   1      }
 370          
 371          void write_time()
 372          {
 373   1        uchar address=0x80;
 374   1        uchar i;
 375   1        Write_Ds1302(0x8e,0x00);
 376   1        for(i=0;i<3;i++)
 377   1        {
 378   2          Write_Ds1302(address,num_to_bcd(time[i]));
 379   2          address=address+2;
 380   2        }
 381   1        Write_Ds1302(0x8e,0x80);
 382   1      }
 383          
 384          void read_time()
 385          {
 386   1        uchar address=0x81;
 387   1        uchar i;
 388   1        for(i=0;i<3;i++)
 389   1        {
 390   2          time[i]=bcd_to_num(Read_Ds1302(address));
 391   2          address=address+2;
 392   2        }
 393   1      }
 394          
 395          void write_data()
 396          {
 397   1        IIC_Start();
 398   1        IIC_SendByte(0xa0);
 399   1        IIC_WaitAck();
 400   1        IIC_SendByte(0x00);
 401   1        IIC_WaitAck();
 402   1        IIC_SendByte(time[2]);
 403   1        IIC_WaitAck();
 404   1        IIC_SendByte(time[1]);
 405   1        IIC_WaitAck();
 406   1        IIC_SendByte(time[0]);
 407   1        IIC_WaitAck();
 408   1        IIC_SendByte(type);
 409   1        IIC_WaitAck();
 410   1        IIC_Stop();
 411   1      }
 412          uchar read_data_byte(uchar address)
 413          {
 414   1        uchar dat;
 415   1        IIC_Start();
 416   1        IIC_SendByte(0xa0);
 417   1        IIC_WaitAck();
 418   1        IIC_SendByte(address);
 419   1        IIC_WaitAck();
 420   1        IIC_Stop();
 421   1        
 422   1        IIC_Start();
 423   1        IIC_SendByte(0xa1);
C51 COMPILER V9.60.0.0   MAIN                                                              11/07/2020 12:05:47 PAGE 8   

 424   1        IIC_WaitAck();
 425   1        dat=IIC_RecByte();
 426   1        IIC_Ack(0);
 427   1        IIC_Stop();
 428   1        return dat;
 429   1      }
 430          
 431          void read_data()
 432          {
 433   1        dat[0]=read_data_byte(0x00);
 434   1        dat[1]=read_data_byte(0x01);
 435   1        dat[2]=read_data_byte(0x02);
 436   1        dat[3]=read_data_byte(0x03);
 437   1      }
 438          
 439          void init_sys()
 440          {
 441   1        select(4);
 442   1        P0=0xff;
 443   1        select(5);
 444   1        P0=0x00;
 445   1        select(0);
 446   1        write_time();
 447   1      }
 448          
 449          void init_timer0()
 450          {
 451   1        TMOD |= 0x04;
 452   1        TL0 = 0xff;
 453   1        TH0 = 0xff;
 454   1        TR0 = 1;
 455   1        EA = 1;
 456   1        ET0 = 1;
 457   1      }
 458          
 459          void init_timer1(void)    //1毫秒@12.000MHz
 460          {
 461   1        AUXR &= 0xBF;   //定时器时钟12T模式
 462   1        TMOD &= 0x0F;   //设置定时器模式
 463   1        TL1 = 0x18;   //设置定时初值
 464   1        TH1 = 0xFC;   //设置定时初值
 465   1        TF1 = 0;    //清除TF1标志
 466   1        TR1 = 1;    //定时器1开始计时
 467   1        EA = 1;
 468   1        ET1 = 1;
 469   1      }
 470          
 471          void ser_timer0() interrupt 1
 472          {
 473   1        count_f++;
 474   1      }
 475          
 476          void ser_timer1() interrupt 3
 477          {
 478   1        static uint count_50ms,count_1s;
 479   1        count_50ms++;
 480   1        count_1s++;
 481   1        set_display();
 482   1        display();
 483   1        scan_key();
 484   1        key_press();
 485   1        if(count_50ms>=50)
C51 COMPILER V9.60.0.0   MAIN                                                              11/07/2020 12:05:47 PAGE 9   

 486   1        {
 487   2          count_50ms=0;
 488   2          if(flag_time)
 489   2          {
 490   3            read_time();
 491   3          }
 492   2          read_data();
 493   2          adc();
 494   2        }
 495   1        if(count_1s>=1000)
 496   1        {
 497   2          count_1s=0;
 498   2          dat_f=count_f;
 499   2          count_f=0;
 500   2        }
 501   1      }
 502          
 503          int main()
 504          {
 505   1        init_sys();
 506   1        init_timer0();
 507   1        init_timer1();
 508   1        write_data();
 509   1        while(1)
 510   1        {
 511   2          
 512   2        }
 513   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
