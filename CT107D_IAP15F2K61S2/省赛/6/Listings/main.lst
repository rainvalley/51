C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 13:07:48 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<stc15f2k60s2.h>
   2          #include"onewire.h"
   3          typedef unsigned char uchar;
   4          typedef unsigned int uint;
   5          //数码管段码与按键分布
   6          uchar code dig_code[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0xbf,0xff,0xc6};
   7          uchar code key_map[4][4]={{0,1,2,19},{3,4,5,18},{6,7,8,17},{9,10,11,16}}; 
   8          //矩阵按键状态与备份
   9          uchar key_stat[4][4]={{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
  10          uchar key_back[4][4]={{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
  11          //数码管与按键缓冲区
  12          uchar buff_tube[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
  13          uchar buff[4]={11,11,11,11};
  14          //逐行扫描
  15          sbit KEY_IN_0=P4^4;
  16          sbit KEY_IN_1=P4^2;
  17          sbit KEY_IN_2=P3^5;
  18          sbit KEY_IN_3=P3^4;
  19          sbit KEY_OUT_0=P3^0;
  20          sbit KEY_OUT_1=P3^1;
  21          sbit KEY_OUT_2=P3^2;
  22          sbit KEY_OUT_3=P3^3;
  23          sbit L1=P0^0;
  24          sbit L2=P0^1;
  25          sbit relay=P0^4;
  26          //变量：最低温度、最高温度、当前工作模式、当前的温度模式
  27          uchar tmin=20,tmax=30,mode=0,mode_temp=0;
  28          //一堆标志变量
  29          uchar flag_1ms,flag_200ms,flag_400ms,flag_800ms,flag_error,flag_1s;
  30          uint temp=0;
  31          
  32          void select(uchar channel)
  33          {
  34   1        switch(channel)
  35   1        {
  36   2          case 4:
  37   2            P2=(P2&0x1f)|0x80;
  38   2            break;
  39   2          case 5:
  40   2            P2=(P2&0x1f)|0xa0;
  41   2            break;
  42   2          case 6:
  43   2            P2=(P2&0x1f)|0xc0;
  44   2            break;
  45   2          case 7:
  46   2            P2=(P2&0x1f)|0xe0;
  47   2            break;
  48   2          case 0:
  49   2            P2=(P2&0x1f);
  50   2            break;
  51   2        }
  52   1      }
  53          
  54          void init_sys()
C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 13:07:48 PAGE 2   

  55          {
  56   1        select(5);
  57   1        P0=0x00;
  58   1        select(4);
  59   1        P0=0xff;
  60   1        select(0);
  61   1      }
  62          
  63          void display()
  64          {
  65   1        static uchar index=0;
  66   1        select(7);
  67   1        P0=0xff;
  68   1        select(6);
  69   1        P0=0x01<<index;
  70   1        select(7);
  71   1        P0=buff_tube[index];
  72   1        select(0);
  73   1        
  74   1        index++;
  75   1        index&=0x07;
  76   1      }
  77          
  78          void scan_key()
  79          {
  80   1        static uchar key_buff[4][4]={{0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},{0xff,0xff
             -,0xff,0xff}};
  81   1        static uchar key_out=0; //行索引
  82   1        uchar i;
  83   1        key_buff[key_out][0]=(key_buff[key_out][0]<<1)|KEY_IN_0;
  84   1        key_buff[key_out][1]=(key_buff[key_out][1]<<1)|KEY_IN_1;
  85   1        key_buff[key_out][2]=(key_buff[key_out][2]<<1)|KEY_IN_2;
  86   1        key_buff[key_out][3]=(key_buff[key_out][3]<<1)|KEY_IN_3;
  87   1        
  88   1        for(i=0;i<4;i++)
  89   1        {
  90   2          if((key_buff[key_out][i]&0x0f)==0x0f)
  91   2          {
  92   3            key_stat[key_out][i]=1;
  93   3          }
  94   2          else if((key_buff[key_out][i]&0x0f)==0x00)
  95   2          {
  96   3            key_stat[key_out][i]=0;
  97   3          }
  98   2        }
  99   1        
 100   1        key_out++;
 101   1        key_out&=0x03;
 102   1        
 103   1        switch(key_out)
 104   1        {
 105   2          case 0: KEY_OUT_3=1;KEY_OUT_0=0;break;
 106   2          case 1: KEY_OUT_0=1;KEY_OUT_1=0;break;
 107   2          case 2: KEY_OUT_1=1;KEY_OUT_2=0;break;
 108   2          case 3: KEY_OUT_2=1;KEY_OUT_3=0;break;
 109   2          default:break;
 110   2        }
 111   1      }
 112          
 113          void key_fun(uchar value)
 114          {
 115   1        static uchar pos=0; //按键位置
C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 13:07:48 PAGE 3   

 116   1        if(value>=0&&value<=9) //如果按下0~9并且处于设置模式则对buff进行修改
 117   1        {
 118   2          if(mode==1)
 119   2          {
 120   3            buff[pos]=value;
 121   3            pos++;
 122   3            if(pos>=4)
 123   3            {
 124   4              pos=4;
 125   4            }
 126   3          }
 127   2        }
 128   1        if(value==10) //如果按下设置按键则根据情况改变工作模式
 129   1        {
 130   2          if(mode==0)
 131   2          {
 132   3            mode=1;
 133   3          }
 134   2          else if(mode==1)
 135   2          {
 136   3            if(tmin=buff[2]*10+buff[3]>=buff[0]*10+buff[1]) //参数设置非法
 137   3            {
 138   4              flag_error=1;
 139   4              mode=1;
 140   4            }
 141   3            else
 142   3            {
 143   4              mode=0;
 144   4              tmax=buff[0]*10+buff[1];
 145   4              tmin=buff[2]*10+buff[3];
 146   4              buff[0]=buff[1]=buff[2]=buff[3]=11;
 147   4              pos=0;
 148   4              flag_error=0;
 149   4            }
 150   3          }
 151   2        }
 152   1        if(value==11&&mode==1) //如果在设置模式下按下清除
 153   1        {
 154   2          pos=0;
 155   2          buff[0]=buff[1]=buff[2]=buff[3]=11;
 156   2        }
 157   1      }
 158          
 159          void key_press()
 160          {
 161   1        uchar i,j;
 162   1        for(i=0;i<4;i++)
 163   1        {
 164   2          for(j=0;j<4;j++)
 165   2          {
 166   3            if(key_stat[i][j]!=key_back[i][j])
 167   3            {
 168   4              if(key_stat[i][j]==0)
 169   4              {
 170   5                key_fun(key_map[i][j]);
 171   5              }
 172   4              key_back[i][j]=key_stat[i][j];
 173   4            }
 174   3          }
 175   2        }
 176   1      }
 177          
C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 13:07:48 PAGE 4   

 178          void set_display()
 179          {
 180   1        if(mode==0)
 181   1        {
 182   2          buff_tube[0]=dig_code[10];
 183   2          buff_tube[1]=dig_code[mode_temp];
 184   2          buff_tube[2]=dig_code[10];
 185   2          buff_tube[3]=dig_code[11];
 186   2          buff_tube[4]=dig_code[11];
 187   2          buff_tube[5]=dig_code[11];
 188   2          buff_tube[6]=dig_code[temp/10];
 189   2          buff_tube[7]=dig_code[temp%10];
 190   2        }
 191   1        else
 192   1        {
 193   2          buff_tube[0]=dig_code[10];
 194   2          buff_tube[1]=dig_code[buff[0]];
 195   2          buff_tube[2]=dig_code[buff[1]];
 196   2          buff_tube[3]=dig_code[11];
 197   2          buff_tube[4]=dig_code[11];
 198   2          buff_tube[5]=dig_code[10];
 199   2          buff_tube[6]=dig_code[buff[2]];
 200   2          buff_tube[7]=dig_code[buff[3]];
 201   2        }
 202   1      }
 203          
 204          void init_timer0(void)    //1毫秒@11.0592MHz
 205          {
 206   1        AUXR |= 0x80;   //定时器时钟1T模式
 207   1        TMOD &= 0xF0;   //设置定时器模式
 208   1        TL0 = 0xCD;   //设置定时初值
 209   1        TH0 = 0xD4;   //设置定时初值
 210   1        TF0 = 0;    //清除TF0标志
 211   1        TR0 = 1;    //定时器0开始计时
 212   1        ET0 = 1;
 213   1        EA = 1;
 214   1      }
 215          
 216          void ser_timer0()interrupt 1
 217          {
 218   1        static uint count_2ms,count_200ms,count_400ms,count_800ms,count_1s;
 219   1        count_2ms++;
 220   1        count_200ms++;
 221   1        count_400ms++;
 222   1        count_800ms++;
 223   1        count_1s++;
 224   1        flag_1ms=1;
 225   1        if(count_2ms>=2)
 226   1        {
 227   2          count_2ms=0;
 228   2          set_display();
 229   2          display();
 230   2        }
 231   1        if(count_200ms>=200)
 232   1        {
 233   2          count_200ms=0;
 234   2          flag_200ms=~flag_200ms;
 235   2        }
 236   1        if(count_400ms>=400)
 237   1        {
 238   2          count_400ms=0;
 239   2          flag_400ms=1;
C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 13:07:48 PAGE 5   

 240   2        }
 241   1        if(count_800ms>=800)
 242   1        {
 243   2          count_800ms=0;
 244   2          flag_800ms=~flag_800ms;
 245   2        }
 246   1        if(count_1s>=1000)
 247   1        {
 248   2          count_1s=0;
 249   2          flag_1s=1;
 250   2        }
 251   1      }
 252          
 253          void led_on(uchar dat)
 254          {
 255   1        P0=0xff;
 256   1        select(4);
 257   1        P0=dat;
 258   1        select(0);
 259   1      }
 260          
 261          void led_fun()
 262          {
 263   1        if(flag_error)
 264   1        {
 265   2          P0=0xff;
 266   2          select(4);
 267   2          L2=0;
 268   2          select(0);
 269   2        }
 270   1        else if(flag_error==0)
 271   1        {
 272   2          P0=0xff;
 273   2          select(4);
 274   2          L2=1;
 275   2          select(0);
 276   2        }
 277   1        
 278   1        if(temp<tmin)
 279   1        {
 280   2          mode_temp=0;
 281   2          P0=0x00;
 282   2          select(5);
 283   2          relay=0;
 284   2          select(0);
 285   2          if(flag_800ms)
 286   2          {
 287   3            led_on(0xfe);
 288   3          }
 289   2          else
 290   2          {
 291   3            led_on(0xff);
 292   3          }
 293   2        }
 294   1        else if(temp<tmax)
 295   1        {
 296   2          mode_temp=1;
 297   2          P0=0x00;
 298   2          select(5);
 299   2          relay=0;
 300   2          select(0);
 301   2          if(flag_400ms)
C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 13:07:48 PAGE 6   

 302   2          {
 303   3            led_on(0xfe);
 304   3          }
 305   2          else
 306   2          {
 307   3            led_on(0xff);
 308   3          }
 309   2        }
 310   1        else
 311   1        {
 312   2          mode_temp=2;
 313   2          P0=0x00;
 314   2          select(5);
 315   2          relay=1;
 316   2          select(0);
 317   2          if(flag_200ms)
 318   2          {
 319   3            led_on(0xfe);
 320   3          }
 321   2          else
 322   2          {
 323   3            led_on(0xff);
 324   3          }
 325   2        }
 326   1      }
 327          
 328          void get_temp()
 329          {
 330   1        uchar LSB,MSB;
 331   1        EA=0;
 332   1        init_ds18b20();
 333   1        Write_DS18B20(0xcc);
 334   1        Write_DS18B20(0x44);
 335   1        init_ds18b20();
 336   1        Write_DS18B20(0xcc);
 337   1        Write_DS18B20(0xbe);
 338   1        LSB=Read_DS18B20();
 339   1        MSB=Read_DS18B20();
 340   1        init_ds18b20();
 341   1        temp=(MSB<<8)|LSB;
 342   1        temp=temp>>4;
 343   1        EA=1;
 344   1      }
 345          
 346          void main()
 347          {
 348   1        init_sys();
 349   1        init_timer0();
 350   1        while(1)
 351   1        {
 352   2          if(flag_1ms)
 353   2          {
 354   3            flag_1ms=0;
 355   3            led_fun();
 356   3            scan_key();
 357   3            key_press();
 358   3          }
 359   2          if(flag_1s)
 360   2          {
 361   3            flag_1s=0;
 362   3            get_temp();
 363   3          }
C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 13:07:48 PAGE 7   

 364   2        }
 365   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1250    ----
   CONSTANT SIZE    =     29    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     85       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
